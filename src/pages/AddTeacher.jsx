import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Layout from '../components/Layout';
import { Input, Button, Upload, Select } from 'antd';
import { ArrowLeftOutlined, UserOutlined, UploadOutlined } from '@ant-design/icons';

const { TextArea } = Input;
const { Option } = Select;

const AddTeacher = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    fullName: '',
    department: '',
    university: '',
    email: '',
    photo: null,
    selectedSubjects: [],
    recommendation: ''
  });

  // Danh s√°ch m√¥n h·ªçc
  const availableSubjects = [
    { code: 'CSE101', name: 'Nh·∫≠p m√¥n l·∫≠p tr√¨nh', department: 'CNTT' },
    { code: 'CSE201', name: 'C·∫•u tr√∫c d·ªØ li·ªáu', department: 'CNTT' },
    { code: 'CSE301', name: 'C∆° s·ªü d·ªØ li·ªáu', department: 'CNTT' },
    { code: 'CSE302', name: 'M·∫°ng m√°y t√≠nh', department: 'CNTT' },
    { code: 'CSE202', name: 'L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng', department: 'CNTT' },
    { code: 'CSE303', name: 'Ph·∫ßn m·ªÅm h·ªá th·ªëng', department: 'CNTT' },
    { code: 'MAT101', name: 'To√°n cao c·∫•p 1', department: 'To√°n h·ªçc' },
    { code: 'MAT201', name: 'To√°n cao c·∫•p 2', department: 'To√°n h·ªçc' },
    { code: 'ENG101', name: 'Ti·∫øng Anh 1', department: 'Ngo·∫°i ng·ªØ' },
    { code: 'ENG201', name: 'Ti·∫øng Anh 2', department: 'Ngo·∫°i ng·ªØ' },
    { code: 'PHY101', name: 'V·∫≠t l√Ω ƒë·∫°i c∆∞∆°ng', department: 'V·∫≠t l√Ω' },
    { code: 'BUS301', name: 'Qu·∫£n tr·ªã doanh nghi·ªáp', department: 'Kinh t·∫ø' },
    { code: 'MKT101', name: 'Marketing cƒÉn b·∫£n', department: 'Kinh t·∫ø' },
    { code: 'ECO201', name: 'Kinh t·∫ø vi m√¥', department: 'Kinh t·∫ø' },
    { code: 'ACC101', name: 'K·∫ø to√°n cƒÉn b·∫£n', department: 'Kinh t·∫ø' }
  ];

  // C√°c khoa/b·ªô m√¥n
  const departments = [
    'Khoa C√¥ng ngh·ªá th√¥ng tin',
    'Khoa Kinh t·∫ø',
    'Khoa K·ªπ thu·∫≠t',
    'Khoa Ngo·∫°i ng·ªØ',
    'Khoa To√°n h·ªçc',
    'Khoa V·∫≠t l√Ω',
    'Khoa H√≥a h·ªçc',
    'Khoa Sinh h·ªçc',
    'Qu·∫£n tr·ªã Marketing',
    'Qu·∫£n tr·ªã D·ª± √°n',
    'L√£nh ƒë·∫°o chuy·ªÉn ƒë·ªïi s·ªë',
    'Qu·∫£n tr·ªã doanh nghi·ªáp',
    'Kh·ªüi nghi·ªáp & ƒê·ªïi m·ªõi s√°ng t·∫°o'
  ];

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubjectChange = (selectedValues) => {
    const selectedSubjects = selectedValues.map(value => {
      const subject = availableSubjects.find(s => s.code === value);
      return subject;
    }).filter(Boolean);
    
    setFormData(prev => ({
      ...prev,
      selectedSubjects: selectedSubjects
    }));
  };

  const handleUpload = (info) => {
    setFormData(prev => ({
      ...prev,
      photo: info.file
    }));
  };

  const handleSubmit = () => {
    // X·ª≠ l√Ω submit form
    console.log('Form data:', formData);
    // Redirect ho·∫∑c show success message
    navigate('/teachers/review');
  };

  const uploadProps = {
    name: 'file',
    beforeUpload: () => false, // Prevent auto upload
    onChange: handleUpload,
    showUploadList: false,
  };

  return (
    <Layout
      title="Th√™m gi·∫£ng vi√™n"
      description="Th√™m th√¥ng tin gi·∫£ng vi√™n m·ªõi v√†o h·ªá th·ªëng"
    >
      <div className="max-w-4xl mx-auto space-y-8">
        {/* Header Section */}
        <div className="relative bg-gradient-to-r from-emerald-600 via-blue-600 to-purple-600 rounded-3xl p-8 text-white overflow-hidden">
          <div className="absolute top-0 right-0 w-48 h-48 bg-white/10 rounded-full -translate-y-24 translate-x-24"></div>
          <div className="absolute bottom-0 left-0 w-32 h-32 bg-white/5 rounded-full translate-y-16 -translate-x-16"></div>
          <div className="relative z-10">
            <div className="flex items-center justify-between">
              <div>
                <div className="flex items-center space-x-2 mb-4 text-blue-100">
                  <span>Professors</span>
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                  <span>Add Professor</span>
                </div>
                <h1 className="text-3xl font-bold mb-2">
                  Th√™m gi·∫£ng vi√™n üë®‚Äçüè´
                </h1>
                <p className="text-blue-100 text-lg">
                  T·∫•t c·∫£ th√¥ng tin s·∫Ω ƒë∆∞·ª£c qu·∫£n tr·ªã vi√™n x√°c minh tr∆∞·ªõc khi hi·ªÉn th·ªã.
                </p>
              </div>
              <div className="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center">
                <UserOutlined className="text-2xl text-white" />
              </div>
            </div>
          </div>
        </div>

        {/* Navigation */}
        <div className="flex items-center space-x-4">
          <Button 
            icon={<ArrowLeftOutlined />}
            onClick={() => navigate('/teachers/add-review')}
            className="flex items-center space-x-2"
          >
            Quay l·∫°i
          </Button>
        </div>

        {/* Form Content */}
        <div className="bg-white rounded-2xl shadow-lg p-8">
          <div className="space-y-8">
            {/* Th√¥ng tin gi·∫£ng vi√™n */}
            <div>
              <h2 className="text-xl font-semibold text-gray-900 mb-6">Th√¥ng tin gi·∫£ng vi√™n</h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* H·ªç v√† t√™n */}
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    H·ªç v√† t√™n *
                  </label>
                  <Input
                    placeholder="Enter full name"
                    value={formData.fullName}
                    onChange={(e) => handleInputChange('fullName', e.target.value)}
                    className="rounded-xl h-12"
                    size="large"
                  />
                </div>

                {/* Khoa/B·ªô m√¥n */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Khoa/B·ªô m√¥n *
                  </label>
                  <Select
                    placeholder="Enter department"
                    value={formData.department}
                    onChange={(value) => handleInputChange('department', value)}
                    className="w-full rounded-xl"
                    style={{ height: '48px' }}
                    size="large"
                    showSearch
                    filterOption={(input, option) =>
                      option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
                    }
                  >
                    {departments.map(dept => (
                      <Option key={dept} value={dept}>{dept}</Option>
                    ))}
                  </Select>
                </div>

                {/* Tr∆∞·ªùng ƒë·∫°i h·ªçc */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Tr∆∞·ªùng ƒë·∫°i h·ªçc *
                  </label>
                  <Input
                    placeholder="Enter university"
                    value={formData.university}
                    onChange={(e) => handleInputChange('university', e.target.value)}
                    className="rounded-xl h-12"
                    size="large"
                  />
                </div>

                {/* Email */}
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email (kh√¥ng b·∫Øt bu·ªôc)
                  </label>
                  <Input
                    type="email"
                    placeholder="Enter email address"
                    value={formData.email}
                    onChange={(e) => handleInputChange('email', e.target.value)}
                    className="rounded-xl h-12"
                    size="large"
                  />
                </div>
              </div>
            </div>

            {/* ·∫¢nh ƒë·∫°i di·ªán */}
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-4">·∫¢nh ƒë·∫°i di·ªán (kh√¥ng b·∫Øt bu·ªôc)</h3>
              
              <div className="flex items-start space-x-6">
                <Upload {...uploadProps}>
                  <Button 
                    icon={<UploadOutlined />}
                    className="h-12 px-6"
                  >
                    Upload Photo
                  </Button>
                </Upload>
                
                {formData.photo && (
                  <div className="w-24 h-24 bg-gray-100 rounded-lg flex items-center justify-center">
                    <UserOutlined className="text-2xl text-gray-400" />
                  </div>
                )}
              </div>
            </div>

            {/* M√¥n h·ªçc gi·∫£ng d·∫°y */}
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-4">M√¥n h·ªçc gi·∫£ng d·∫°y</h3>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ch·ªçn c√°c m√¥n h·ªçc m√† gi·∫£ng vi√™n n√†y gi·∫£ng d·∫°y *
                </label>
                <Select
                  mode="multiple"
                  placeholder="Ch·ªçn m√¥n h·ªçc..."
                  value={formData.selectedSubjects.map(s => s.code)}
                  onChange={handleSubjectChange}
                  className="w-full"
                  size="large"
                  showSearch
                  filterOption={(input, option) =>
                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
                  }
                  maxTagCount="responsive"
                >
                  {availableSubjects.map(subject => (
                    <Option key={subject.code} value={subject.code}>
                      {subject.code} - {subject.name} ({subject.department})
                    </Option>
                  ))}
                </Select>
              </div>

              {/* Selected Subjects Display */}
              {formData.selectedSubjects.length > 0 && (
                <div className="mt-4 p-4 bg-blue-50 rounded-xl border border-blue-200">
                  <div className="text-sm font-medium text-blue-800 mb-3">
                    ƒê√£ ch·ªçn {formData.selectedSubjects.length} m√¥n h·ªçc:
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {formData.selectedSubjects.map(subject => (
                      <div 
                        key={subject.code}
                        className="bg-white p-3 rounded-lg border border-blue-200"
                      >
                        <div className="font-medium text-blue-900">{subject.code}</div>
                        <div className="text-sm text-blue-700">{subject.name}</div>
                        <div className="text-xs text-blue-600">{subject.department}</div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* ƒê·ªÅ xu·∫•t */}
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-4">ƒê·ªÅ xu·∫•t</h3>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  T·∫°i sao b·∫°n ƒë·ªÅ xu·∫•t gi·∫£ng vi√™n n√†y?
                </label>
                <TextArea
                  placeholder="H√£y chia s·∫ª tr·∫£i nghi·ªám ho·∫∑c l√Ω do c·ªßa b·∫°n."
                  value={formData.recommendation}
                  onChange={(e) => handleInputChange('recommendation', e.target.value)}
                  rows={6}
                  className="rounded-xl"
                />
              </div>
            </div>

            {/* Action Buttons */}
            <div className="flex justify-between pt-6">
              <Button 
                onClick={() => navigate('/teachers/add-review')}
                className="px-8 h-12"
              >
                Previous step
              </Button>
              
              <Button 
                type="primary"
                onClick={handleSubmit}
                className="bg-blue-600 hover:bg-blue-700 px-8 h-12"
                disabled={!formData.fullName || !formData.department || !formData.university || formData.selectedSubjects.length === 0}
              >
                Save 
              </Button>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default AddTeacher;
